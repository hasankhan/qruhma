@{
	ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.12/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

<div id="loading"><center><h1>Loading...</h1><img src="~/img/squares.gif" width="100" height="100"></center></div>
<div id="report" class="collapse">
	<h1>QRuhma Report</h1>

	<ul class="nav nav-tabs">
		<li class="active"><a data-toggle="tab" href="#stats">Stats</a></li>
		<li><a data-toggle="tab" href="#students">Students</a></li>
		<li><a data-toggle="tab" href="#volunteers">Volunteers</a></li>
	</ul>

	<div class="tab-content">
		<div id="stats" class="tab-pane fade in active">
			<h2>Total students (<span id="studentCount"></span>)</h2>
			<h2>Sisters: <span id="sistersCount"></span></h2>
			<h2>Brothers: <span id="brothersCount"></span></h2>
			<h2>Registered today: <span id="registeredToday"></span></h2>
			<div id="regByDayChart" style="width:100%; min-width:600px; height: 400px; margin: 0 auto"></div>
			<div id="regByCityChart" style="width: 100%; min-width: 600px; height: 400px; margin: 0 auto"></div>
			<div id="ageDistChart" style="width: 100%; min-width: 600px; height: 400px; margin: 0 auto"></div>
		</div>

		<div id="students" class="tab-pane fade">
			<table class="student_legend">
				<tr class="volunteer">
					<td>Volunteer</td>
				</tr>
				<tr class="volunteer not_paid">
					<td>Volunteer has not paid</td>
				</tr>
			</table>
			<table id="studentsTable"
				   data-order='[[ 6, "desc" ]]'
				   class="display">
			</table>
		</div>
		
		<div id="volunteers" class="tab-pane fade">
			<center><h1>unregistered volunteers (<span id="unreg_volunteer_count"></span>)</h1></center>
			<table id="volunteersTable" class="display" width="200"></table>
		</div>
	</div>
</div>
@section scripts {
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
	<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
	<script src="https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.full.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
	<script src="https://code.highcharts.com/stock/highstock.js"></script>

	<script type="text/javascript">
		$(function () {
			var dataTable;
			var volunteersList;
			var studentsList;

			function persistTabs() {
				// show active tab on reload
				if (location.hash !== '') $('a[href="' + location.hash + '"]').tab('show');

				// remember the hash in the URL without jumping
				$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
					if (history.pushState) {
						history.pushState(null, null, '#' + $(e.target).attr('href').substr(1));
					} else {
						location.hash = '#' + $(e.target).attr('href').substr(1);
					}
				});
			}

			function downloadStudentsList() {
				var oReq = new XMLHttpRequest();
				oReq.open("GET", "Home/List/", true);
				oReq.responseType = "arraybuffer";
				oReq.onload = function (e) {
					var arraybuffer = oReq.response;

					/* convert data to binary string */
					var data = new Uint8Array(arraybuffer);
					var arr = new Array();
					for (var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
					var bstr = arr.join("");

					/* Call XLSX */
					var workbook = XLSX.read(bstr, { type: "binary" });

					transform(workbook);
				}

				oReq.send();
			}

			function calculateAge(birthday) {
				var ageDiffMSec = Date.now() - birthday.getTime();
				var ageDateEpoc = new Date(ageDiffMSec);
				return Math.abs(ageDateEpoc.getUTCFullYear() - 1970);
			}

			function transform(workbook) {
				var first_sheet_name = workbook.SheetNames[0];
				var worksheet = workbook.Sheets[first_sheet_name];
				var range = worksheet['!range'];
				
				var headers = [];
				for (var col = 0; col < range.e.c; col++) {
					var alphabet = String.fromCharCode(65 + col);
					var title = worksheet[alphabet + 9].v;
					headers.push({ alphabet: alphabet, title: title });
				}

				studentsList = [];
				for (var row = 10; row < range.e.r - 1; row++) {

					var student = {};
					headers.forEach(function (h) {
						var cell = worksheet[h.alphabet + row];
						var value = cell ? cell.v : null;
						student[h.title] = value;
					});

					var dob = student['DOB'];
					student['Age'] = dob ? calculateAge(new Date(dob)): null;
			
					student['RegistrationStamp'] = new Date(student['Registration Date']).toDateString();

					student['Name'] = student['First Name'] + ' ' + student['Last Name']

					// ignore students without a name
					if (student['First Name'] || student['Last Name']) {
						studentsList.push(student);
					}
				}				

				renderCharts(studentsList);
				renderStats(studentsList);
				
				dataTable = $('#studentsTable').DataTable({
					data: studentsList,
					columns: [
						{ title: 'First', data: 'First Name' },
						{ title: 'Last', data: 'Last Name' },
						{ title: 'Gender', data: 'Gender' },
						{ title: 'Email', data: 'Email' },
						{ title: 'City', data: 'City' },
						{ title: 'State', data: 'State' },
						{ title: 'Reg. Date', data: 'RegistrationStamp' },
						{ title: 'Paid', data: 'Fully Paid' },
					],
					paging: false
				});
				
				$('#loading').hide();
				$('#report').show();

				fetchVolunteers();
			}

			function renderStats(studentsList) {
				var genderCount = _.countBy(studentsList, function (x) { return x['Gender']; });
				$('#brothersCount').text(genderCount['m']);
				$('#sistersCount').text(genderCount['f']);
				var paid = _.filter(studentsList, function (s) { return s['Fully Paid'] == 'Yes'; }).length;
				$('#studentCount').text(paid + '/' + studentsList.length);
				var today = new Date();
				today.setHours(0, 0, 0, 0);
				today = today.toDateString();
				var regToday = _.filter(studentsList, function (s) { return s['RegistrationStamp'] === today }).length;
				$('#registeredToday').text(regToday);
			}

			function renderCharts(studentsList) {
				var dateCountData = 
					_.map(
						_.values(
							_.groupBy(studentsList, function (x) { return x['RegistrationStamp']; })
						), 
						function(x) { 
							return [ 
								new Date(x[0]['RegistrationStamp']).getTime(), 
								x.length
							]; 
						}
					);

				dateCountData = _.sortBy(dateCountData, function(x) { return x[0]; });

				$('#regByDayChart').highcharts('StockChart', {
					title: {
						text: 'Registrations by day'
					},
					series: [{
						name: 'Count',
						data: dateCountData
					}]
				});

				var cityCountData = 
					_.sortBy(
						_.map(
							_.values(
								_.groupBy(studentsList, function (x) { return x['City'].toString().toLowerCase().trim().split(' ')[0]; })
							),
							function(x) {
								return [
									x[0]['City'].toString().toLowerCase(),
									x.length
								];
							}
						),
						function(x) { return -x[1]; }
					);

				var brotherAges = calculateAgeDistribution(studentsList, 'm');
				var sisterAges = calculateAgeDistribution(studentsList, 'f');

				$('#ageDistChart').highcharts({
					chart: {
						type: 'column'
					},
					title: {
						text: 'Student age distribution'
					},
					xAxis: {
						min: 0,
						stackLabels: {
							enabled: true
						},
						title: { text: "Age" }
					},
					yAxis: {
						title: { text: "Count" }
					},
					legend: {
						align: 'right',
						x: -30,
						verticalAlign: 'top',
						y: 25,
						floating: true,
						backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
						borderColor: '#CCC',
						borderWidth: 1,
						shadow: false
					},
					plotOptions: {
						column: {
							stacking: 'normal',
							dataLabels: {
								enabled: true
							}
						}
					},
					series: [{
						name: 'Brother',
						data: brotherAges
					}, {
						name: 'Sister',
						data: sisterAges
					}]
				});

				cityCountData = _.filter(cityCountData, function (x) { return x[1] > 1; });
				var cityCountDataSum = _.reduce(cityCountData, function (m, x) { return m+x[1]; }, 0);
				cityCountData.push(['other', studentsList.length - cityCountDataSum]);

				$('#regByCityChart').highcharts({
					chart: {
						type: 'column'
					},
					title: {
						text: 'Registrations by city'
					},
					xAxis: {
						type: 'category',
						labels: {
							rotation: -45,
							style: {
								fontSize: '13px',
								fontFamily: 'Verdana, sans-serif'
							}
						}
					},
					yAxis: {
						min: 0,
						title: {
							text: 'Registration count'
						}
					},
					legend: {
						enabled: false
					},
					series: [{
						name: 'Registration Count',
						data: cityCountData,
						dataLabels: {
							enabled: true,
							rotation: -90,
							color: '#FFFFFF',
							align: 'right',
							y: 10, // 10 pixels down from the top
							style: {
								fontSize: '13px',
								fontFamily: 'Verdana, sans-serif'
							}
						}
					}]
				});
			}

			function calculateAgeDistribution(studentsList, gender) {
				var ageDist = _.map(
							_.groupBy(
								_.filter(studentsList, function (s) { return s['Gender'] == gender && !isNaN(s['Age']); }),
								function (s) {
									return s['Age'];
								}
							),
							function (x) {
								return [
									x[0]['Age'],
									x.length
								];
							}
						);
				
				return ageDist;
			}

			function fetchVolunteers() {
				$.getJSON('https://slack.com/api/users.list?token=@ViewBag.SlackApiToken', function (result) {
					volunteersList = result.members;

					var indexes = dataTable.rows().eq(0).filter(function (rowIdx) {
						var email = dataTable.cell(rowIdx, 3).data().toLowerCase();
						var name = (dataTable.cell(rowIdx, 0).data() + ' ' + dataTable.cell(rowIdx, 1).data()).toLowerCase();
						return _.any(volunteersList, function (v) {
							return  (v.real_name && name === v.real_name.toLowerCase()) ||
									(v.name && name === v.name.toLowerCase()) ||
									v.profile.email && email === v.profile.email.toLowerCase();
						})
					});
					dataTable.rows (indexes).nodes().to$().addClass('volunteer');

					indexes = dataTable.rows().eq(0).filter(function(rowIdx) { return dataTable.cell(rowIdx, 7).data() === 'No'; });
					dataTable.rows(indexes).nodes().to$().addClass('not_paid');

					var unregistered = _.filter(volunteersList, function (v) {
						// those volunteers are not in the students list
						return !v.deleted && !v.is_bot && v.profile.email && !_.any(studentsList, function (s) {
							var name = s.Name.toLowerCase();
							return (s.Email && v.profile.email && (s.Email.toLowerCase() === v.profile.email.toLowerCase())) ||
									(name === v.real_name.toLowerCase() || name === v.name.toLowerCase());
						});
					});
					
					$('#unreg_volunteer_count').text(unregistered.length);

					var volunteerTable = $('#volunteersTable').DataTable({
						data: unregistered,
						columns: [
							{ title: 'Name', data: function (x) { return x.real_name || x.name || '' } },
							{ title: 'Email', data: 'profile.email' }
						],
						paging: false,
						searching: false
					});
				});
			}

			persistTabs();
			downloadStudentsList();
		});
	</script>
}
